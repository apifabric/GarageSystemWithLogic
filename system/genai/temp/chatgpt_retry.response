{
    "models": [
        {
            "classname": "Garage",
            "code": "class Garage(Base):\n    \"\"\"description: Represents a car garage.\"\"\"\n    __tablename__ = 'garage'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)  # Garage name\n    location = Column(String)  # Location of the garage\n    capacity = Column(Integer)  # Number of cars the garage can hold\n    car_count = Column(Integer, default=0)  # Derived car count\n    employee_count = Column(Integer, default=0)  # Derived employee count",
            "sqlite_create": "CREATE TABLE garage (\n    id INTEGER NOT NULL,\n    name VARCHAR,\n    location VARCHAR,\n    capacity INTEGER,\n    car_count INTEGER,\n    employee_count INTEGER,\n    PRIMARY KEY (id)\n)",
            "description": "Represents a car garage.",
            "name": "Garage"
        },
        {
            "classname": "Car",
            "code": "class Car(Base):\n    \"\"\"description: Represents a car.\"\"\"\n    __tablename__ = 'car'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    model = Column(String)  # Car model\n    make = Column(String)  # Car make\n    year = Column(Integer)  # Manufacturing year\n    registration_number = Column(String)  # Registration number\n    owner_id = Column(Integer, ForeignKey('owner.id'))  # ID of the owner\n    service_count = Column(Integer, default=0)  # Derived service count",
            "sqlite_create": "CREATE TABLE car (\n    id INTEGER NOT NULL,\n    model VARCHAR,\n    make VARCHAR,\n    year INTEGER,\n    registration_number VARCHAR,\n    owner_id INTEGER,\n    service_count INTEGER,\n    PRIMARY KEY (id),\n    FOREIGN KEY(owner_id) REFERENCES owner (id)\n)",
            "description": "Represents a car.",
            "name": "Car"
        },
        {
            "classname": "Owner",
            "code": "class Owner(Base):\n    \"\"\"description: Represents a car owner.\"\"\"\n    __tablename__ = 'owner'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)  # Owner name\n    address = Column(String)  # Owner address\n    contact_number = Column(String)  # Contact number\n    car_count = Column(Integer, default=0)  # Derived car count",
            "sqlite_create": "CREATE TABLE owner (\n    id INTEGER NOT NULL,\n    name VARCHAR,\n    address VARCHAR,\n    contact_number VARCHAR,\n    car_count INTEGER,\n    PRIMARY KEY (id)\n)",
            "description": "Represents a car owner.",
            "name": "Owner"
        },
        {
            "classname": "Service",
            "code": "class Service(Base):\n    \"\"\"description: Represents a car service record.\"\"\"\n    __tablename__ = 'service'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    car_id = Column(Integer, ForeignKey('car.id'))  # ID of the car\n    service_date = Column(Date)  # Date of service\n    description = Column(String)  # Description of the service\n    repair_count = Column(Integer, default=0)  # Derived repair count",
            "sqlite_create": "CREATE TABLE service (\n    id INTEGER NOT NULL,\n    car_id INTEGER,\n    service_date DATE,\n    description VARCHAR,\n    repair_count INTEGER,\n    PRIMARY KEY (id),\n    FOREIGN KEY(car_id) REFERENCES car (id)\n)",
            "description": "Represents a car service record.",
            "name": "Service"
        },
        {
            "classname": "Employee",
            "code": "class Employee(Base):\n    \"\"\"description: Represents a garage employee.\"\"\"\n    __tablename__ = 'employee'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)  # Employee name\n    role = Column(String)  # Employee role\n    garage_id = Column(Integer, ForeignKey('garage.id'))  # ID of the garage they work for",
            "sqlite_create": "CREATE TABLE employee (\n    id INTEGER NOT NULL,\n    name VARCHAR,\n    role VARCHAR,\n    garage_id INTEGER,\n    PRIMARY KEY (id),\n    FOREIGN KEY(garage_id) REFERENCES garage (id)\n)",
            "description": "Represents a garage employee.",
            "name": "Employee"
        },
        {
            "classname": "Part",
            "code": "class Part(Base):\n    \"\"\"description: Represents a car part.\"\"\"\n    __tablename__ = 'part'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)  # Part name\n    price = Column(Integer)  # Part price",
            "sqlite_create": "CREATE TABLE part (\n    id INTEGER NOT NULL,\n    name VARCHAR,\n    price INTEGER,\n    PRIMARY KEY (id)\n)",
            "description": "Represents a car part.",
            "name": "Part"
        },
        {
            "classname": "Repair",
            "code": "class Repair(Base):\n    \"\"\"description: Represents a car repair record.\"\"\"\n    __tablename__ = 'repair'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    service_id = Column(Integer, ForeignKey('service.id'))  # Associated service\n    part_id = Column(Integer, ForeignKey('part.id'))  # Part used\n    repair_date = Column(Date)  # Date of repair\n    repair_cost_total = Column(Integer, default=0)  # Sum of repair costs",
            "sqlite_create": "CREATE TABLE repair (\n    id INTEGER NOT NULL,\n    service_id INTEGER,\n    part_id INTEGER,\n    repair_date DATE,\n    repair_cost_total INTEGER,\n    PRIMARY KEY (id),\n    FOREIGN KEY(service_id) REFERENCES service (id),\n    FOREIGN KEY(part_id) REFERENCES part (id)\n)",
            "description": "Represents a car repair record.",
            "name": "Repair"
        },
        {
            "classname": "Appointment",
            "code": "class Appointment(Base):\n    \"\"\"description: Represents an appointment for car service.\"\"\"\n    __tablename__ = 'appointment'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    car_id = Column(Integer, ForeignKey('car.id'))  # Car ID for appointment\n    appointment_date = Column(Date)  # Appointment date",
            "sqlite_create": "CREATE TABLE appointment (\n    id INTEGER NOT NULL,\n    car_id INTEGER,\n    appointment_date DATE,\n    PRIMARY KEY (id),\n    FOREIGN KEY(car_id) REFERENCES car (id)\n)",
            "description": "Represents an appointment for car service.",
            "name": "Appointment"
        },
        {
            "classname": "Invoice",
            "code": "class Invoice(Base):\n    \"\"\"description: Represents an invoice for a car service.\"\"\"\n    __tablename__ = 'invoice'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    service_id = Column(Integer, ForeignKey('service.id'))  # Service ID\n    total_amount = Column(Integer)  # Total amount charged\n    invoice_count = Column(Integer, default=0)  # Derived invoice count",
            "sqlite_create": "CREATE TABLE invoice (\n    id INTEGER NOT NULL,\n    service_id INTEGER,\n    total_amount INTEGER,\n    invoice_count INTEGER,\n    PRIMARY KEY (id),\n    FOREIGN KEY(service_id) REFERENCES service (id)\n)",
            "description": "Represents an invoice for a car service.",
            "name": "Invoice"
        },
        {
            "classname": "Vendor",
            "code": "class Vendor(Base):\n    \"\"\"description: Represents a vendor supplying car parts.\"\"\"\n    __tablename__ = 'vendor'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)  # Vendor name\n    contact_info = Column(String)  # Vendor contact information",
            "sqlite_create": "CREATE TABLE vendor (\n    id INTEGER NOT NULL,\n    name VARCHAR,\n    contact_info VARCHAR,\n    PRIMARY KEY (id)\n)",
            "description": "Represents a vendor supplying car parts.",
            "name": "Vendor"
        }
    ],
    "rules": [
        {
            "name": "Count Services for Car",
            "description": "Count of all services performed on a car.",
            "use_case": "Service Monitoring",
            "entity": "Car",
            "code": "Rule.count(derive=Car.service_count, as_count_of=Service)"
        },
        {
            "name": "Garage Capacity Constraint",
            "description": "Enforce capacity constraint on garage.",
            "use_case": "Capacity Management",
            "entity": "Garage",
            "code": "Rule.constraint(validate=Garage,\n                as_condition=lambda row: row.car_count <= row.capacity,\n                error_msg=\"Garage car count ({row.car_count}) exceeds capacity ({row.capacity})\")"
        },
        {
            "name": "Count Cars for Owner",
            "description": "Count of all cars owned by a specific owner.",
            "use_case": "Ownership Tracking",
            "entity": "Owner",
            "code": "Rule.count(derive=Owner.car_count, as_count_of=Car)"
        },
        {
            "name": "Count Services for Repair",
            "description": "Count of services associated with a specific repair.",
            "use_case": "Repair Analysis",
            "entity": "Service",
            "code": "Rule.count(derive=Service.repair_count, as_count_of=Repair)"
        },
        {
            "name": "Count Invoices for Service",
            "description": "Count of invoices for a specific service.",
            "use_case": "Billing",
            "entity": "Service",
            "code": "Rule.count(derive=Invoice.invoice_count, as_count_of=Invoice)"
        },
        {
            "name": "Count Employees in Garage",
            "description": "Count of employees working in a garage.",
            "use_case": "Employee Management",
            "entity": "Garage",
            "code": "Rule.count(derive=Garage.employee_count, as_count_of=Employee)"
        },
        {
            "name": "Sum Repair Costs",
            "description": "Sum of costs incurred for repairs.",
            "use_case": "Cost Tracking",
            "entity": "Repair",
            "code": "Rule.sum(derive=Repair.repair_cost_total, as_sum_of=Part.price)"
        }
    ],
    "test_data": "Test data for the newly created rules and updates to existing ones.",
    "test_data_rows": [
        {
            "test_data_row_variable": "garage1",
            "code": "garage1 = Garage(name=\"City Center Garage\", location=\"Downtown\", capacity=100, car_count=0, employee_count=0)"
        },
        {
            "test_data_row_variable": "garage2",
            "code": "garage2 = Garage(name=\"Suburban Auto\", location=\"Suburb\", capacity=50, car_count=0, employee_count=0)"
        },
        {
            "test_data_row_variable": "garage3",
            "code": "garage3 = Garage(name=\"Rural Roadside\", location=\"Countryside\", capacity=30, car_count=0, employee_count=0)"
        },
        {
            "test_data_row_variable": "garage4",
            "code": "garage4 = Garage(name=\"Highway Hub\", location=\"Highway\", capacity=200, car_count=0, employee_count=0)"
        },
        {
            "test_data_row_variable": "car1",
            "code": "car1 = Car(model=\"Model S\", make=\"Tesla\", year=2020, registration_number=\"123ABC\", owner_id=1, service_count=0)"
        },
        {
            "test_data_row_variable": "car2",
            "code": "car2 = Car(model=\"Accord\", make=\"Honda\", year=2018, registration_number=\"456DEF\", owner_id=2, service_count=0)"
        },
        {
            "test_data_row_variable": "car3",
            "code": "car3 = Car(model=\"F-150\", make=\"Ford\", year=2021, registration_number=\"789GHI\", owner_id=1, service_count=0)"
        },
        {
            "test_data_row_variable": "car4",
            "code": "car4 = Car(model=\"Corolla\", make=\"Toyota\", year=2019, registration_number=\"012JKL\", owner_id=3, service_count=0)"
        },
        {
            "test_data_row_variable": "owner1",
            "code": "owner1 = Owner(name=\"Alice Johnson\", address=\"123 Elm St\", contact_number=\"555-0123\", car_count=0)"
        },
        {
            "test_data_row_variable": "owner2",
            "code": "owner2 = Owner(name=\"Bob Smith\", address=\"456 Maple Dr\", contact_number=\"555-4567\", car_count=0)"
        },
        {
            "test_data_row_variable": "owner3",
            "code": "owner3 = Owner(name=\"Carol King\", address=\"789 Oak Ave\", contact_number=\"555-7890\", car_count=0)"
        },
        {
            "test_data_row_variable": "owner4",
            "code": "owner4 = Owner(name=\"Dave Lee\", address=\"321 Pine Rd\", contact_number=\"555-3210\", car_count=0)"
        },
        {
            "test_data_row_variable": "service1",
            "code": "service1 = Service(car_id=1, service_date=date(2023, 7, 25), description=\"Oil change\", repair_count=0)"
        },
        {
            "test_data_row_variable": "service2",
            "code": "service2 = Service(car_id=2, service_date=date(2023, 6, 14), description=\"Tire rotation\", repair_count=0)"
        },
        {
            "test_data_row_variable": "service3",
            "code": "service3 = Service(car_id=3, service_date=date(2023, 8, 10), description=\"Brake inspection\", repair_count=0)"
        },
        {
            "test_data_row_variable": "service4",
            "code": "service4 = Service(car_id=4, service_date=date(2023, 5, 5), description=\"Battery replacement\", repair_count=0)"
        },
        {
            "test_data_row_variable": "employee1",
            "code": "employee1 = Employee(name=\"Eve Turner\", role=\"Mechanic\", garage_id=1)"
        },
        {
            "test_data_row_variable": "employee2",
            "code": "employee2 = Employee(name=\"Frank White\", role=\"Receptionist\", garage_id=2)"
        },
        {
            "test_data_row_variable": "employee3",
            "code": "employee3 = Employee(name=\"Grace Hill\", role=\"Manager\", garage_id=1)"
        },
        {
            "test_data_row_variable": "employee4",
            "code": "employee4 = Employee(name=\"Hank Green\", role=\"Technician\", garage_id=3)"
        },
        {
            "test_data_row_variable": "part1",
            "code": "part1 = Part(name=\"Brake Pad\", price=80)"
        },
        {
            "test_data_row_variable": "part2",
            "code": "part2 = Part(name=\"Oil Filter\", price=20)"
        },
        {
            "test_data_row_variable": "part3",
            "code": "part3 = Part(name=\"Spark Plug\", price=10)"
        },
        {
            "test_data_row_variable": "part4",
            "code": "part4 = Part(name=\"Car Battery\", price=120)"
        },
        {
            "test_data_row_variable": "repair1",
            "code": "repair1 = Repair(service_id=1, part_id=2, repair_date=date(2023, 7, 26), repair_cost_total=0)"
        },
        {
            "test_data_row_variable": "repair2",
            "code": "repair2 = Repair(service_id=2, part_id=1, repair_date=date(2023, 6, 15), repair_cost_total=0)"
        },
        {
            "test_data_row_variable": "repair3",
            "code": "repair3 = Repair(service_id=3, part_id=3, repair_date=date(2023, 8, 11), repair_cost_total=0)"
        },
        {
            "test_data_row_variable": "repair4",
            "code": "repair4 = Repair(service_id=4, part_id=4, repair_date=date(2023, 5, 6), repair_cost_total=0)"
        },
        {
            "test_data_row_variable": "appointment1",
            "code": "appointment1 = Appointment(car_id=1, appointment_date=date(2023, 8, 15))"
        },
        {
            "test_data_row_variable": "appointment2",
            "code": "appointment2 = Appointment(car_id=2, appointment_date=date(2023, 8, 25))"
        },
        {
            "test_data_row_variable": "appointment3",
            "code": "appointment3 = Appointment(car_id=3, appointment_date=date(2023, 9, 5))"
        },
        {
            "test_data_row_variable": "appointment4",
            "code": "appointment4 = Appointment(car_id=4, appointment_date=date(2023, 9, 15))"
        },
        {
            "test_data_row_variable": "invoice1",
            "code": "invoice1 = Invoice(service_id=1, total_amount=150, invoice_count=0)"
        },
        {
            "test_data_row_variable": "invoice2",
            "code": "invoice2 = Invoice(service_id=2, total_amount=200, invoice_count=0)"
        },
        {
            "test_data_row_variable": "invoice3",
            "code": "invoice3 = Invoice(service_id=3, total_amount=180, invoice_count=0)"
        },
        {
            "test_data_row_variable": "invoice4",
            "code": "invoice4 = Invoice(service_id=4, total_amount=250, invoice_count=0)"
        },
        {
            "test_data_row_variable": "vendor1",
            "code": "vendor1 = Vendor(name=\"Auto Parts Co.\", contact_info=\"autoparts@example.com\")"
        },
        {
            "test_data_row_variable": "vendor2",
            "code": "vendor2 = Vendor(name=\"Car Essentials Inc.\", contact_info=\"careessentials@example.com\")"
        },
        {
            "test_data_row_variable": "vendor3",
            "code": "vendor3 = Vendor(name=\"Vehicle Supplies Ltd.\", contact_info=\"vehiclesupplies@example.com\")"
        },
        {
            "test_data_row_variable": "vendor4",
            "code": "vendor4 = Vendor(name=\"Motor Elements LLC.\", contact_info=\"motorelements@example.com\")"
        }
    ],
    "test_data_sqlite": "INSERT INTO garage (name, location, capacity, car_count, employee_count) VALUES (\"City Center Garage\", \"Downtown\", 100, 0, 0);\nINSERT INTO garage (name, location, capacity, car_count, employee_count) VALUES (\"Suburban Auto\", \"Suburb\", 50, 0, 0);\nINSERT INTO garage (name, location, capacity, car_count, employee_count) VALUES (\"Rural Roadside\", \"Countryside\", 30, 0, 0);\nINSERT INTO garage (name, location, capacity, car_count, employee_count) VALUES (\"Highway Hub\", \"Highway\", 200, 0, 0);\n\nINSERT INTO car (model, make, year, registration_number, owner_id, service_count) VALUES (\"Model S\", \"Tesla\", 2020, \"123ABC\", 1, 0);\nINSERT INTO car (model, make, year, registration_number, owner_id, service_count) VALUES (\"Accord\", \"Honda\", 2018, \"456DEF\", 2, 0);\nINSERT INTO car (model, make, year, registration_number, owner_id, service_count) VALUES (\"F-150\", \"Ford\", 2021, \"789GHI\", 1, 0);\nINSERT INTO car (model, make, year, registration_number, owner_id, service_count) VALUES (\"Corolla\", \"Toyota\", 2019, \"012JKL\", 3, 0);\n\nINSERT INTO owner (name, address, contact_number, car_count) VALUES (\"Alice Johnson\", \"123 Elm St\", \"555-0123\", 0);\nINSERT INTO owner (name, address, contact_number, car_count) VALUES (\"Bob Smith\", \"456 Maple Dr\", \"555-4567\", 0);\nINSERT INTO owner (name, address, contact_number, car_count) VALUES (\"Carol King\", \"789 Oak Ave\", \"555-7890\", 0);\nINSERT INTO owner (name, address, contact_number, car_count) VALUES (\"Dave Lee\", \"321 Pine Rd\", \"555-3210\", 0);\n\nINSERT INTO service (car_id, service_date, description, repair_count) VALUES (1, \"2023-07-25\", \"Oil change\", 0);\nINSERT INTO service (car_id, service_date, description, repair_count) VALUES (2, \"2023-06-14\", \"Tire rotation\", 0);\nINSERT INTO service (car_id, service_date, description, repair_count) VALUES (3, \"2023-08-10\", \"Brake inspection\", 0);\nINSERT INTO service (car_id, service_date, description, repair_count) VALUES (4, \"2023-05-05\", \"Battery replacement\", 0);\n\nINSERT INTO employee (name, role, garage_id) VALUES (\"Eve Turner\", \"Mechanic\", 1);\nINSERT INTO employee (name, role, garage_id) VALUES (\"Frank White\", \"Receptionist\", 2);\nINSERT INTO employee (name, role, garage_id) VALUES (\"Grace Hill\", \"Manager\", 1);\nINSERT INTO employee (name, role, garage_id) VALUES (\"Hank Green\", \"Technician\", 3);\n\nINSERT INTO part (name, price) VALUES (\"Brake Pad\", 80);\nINSERT INTO part (name, price) VALUES (\"Oil Filter\", 20);\nINSERT INTO part (name, price) VALUES (\"Spark Plug\", 10);\nINSERT INTO part (name, price) VALUES (\"Car Battery\", 120);\n\nINSERT INTO repair (service_id, part_id, repair_date, repair_cost_total) VALUES (1, 2, \"2023-07-26\", 0);\nINSERT INTO repair (service_id, part_id, repair_date, repair_cost_total) VALUES (2, 1, \"2023-06-15\", 0);\nINSERT INTO repair (service_id, part_id, repair_date, repair_cost_total) VALUES (3, 3, \"2023-08-11\", 0);\nINSERT INTO repair (service_id, part_id, repair_date, repair_cost_total) VALUES (4, 4, \"2023-05-06\", 0);\n\nINSERT INTO appointment (car_id, appointment_date) VALUES (1, \"2023-08-15\");\nINSERT INTO appointment (car_id, appointment_date) VALUES (2, \"2023-08-25\");\nINSERT INTO appointment (car_id, appointment_date) VALUES (3, \"2023-09-05\");\nINSERT INTO appointment (car_id, appointment_date) VALUES (4, \"2023-09-15\");\n\nINSERT INTO invoice (service_id, total_amount, invoice_count) VALUES (1, 150, 0);\nINSERT INTO invoice (service_id, total_amount, invoice_count) VALUES (2, 200, 0);\nINSERT INTO invoice (service_id, total_amount, invoice_count) VALUES (3, 180, 0);\nINSERT INTO invoice (service_id, total_amount, invoice_count) VALUES (4, 250, 0);\n\nINSERT INTO vendor (name, contact_info) VALUES (\"Auto Parts Co.\", \"autoparts@example.com\");\nINSERT INTO vendor (name, contact_info) VALUES (\"Car Essentials Inc.\", \"careessentials@example.com\");\nINSERT INTO vendor (name, contact_info) VALUES (\"Vehicle Supplies Ltd.\", \"vehiclesupplies@example.com\");\nINSERT INTO vendor (name, contact_info) VALUES (\"Motor Elements LLC.\", \"motorelements@example.com\");\n",
    "name": "GarageSystemWithLogic"
}